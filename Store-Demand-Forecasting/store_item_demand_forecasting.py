# -*- coding: utf-8 -*-
"""Store Item Demand Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_1M7PRxYVcRn2P_xnuzj_Ni_W_rSQfud
"""

from google.colab import drive
drive.mount('/content/drive')

# necessary libraries 
import numpy as np 
import pandas as pd
import keras.backend as K
from keras.layers import Dense, Dropout, Embedding, Input, Reshape, Concatenate
from keras.models import Model

#zip file reading section 
import zipfile
zip_ref = zipfile.ZipFile("/content/drive/MyDrive/demand-forecasting-kernels-only.zip", 'r')
zip_ref.extractall("/demandforecasting")
zip_ref.close()

# train = pd.read_csv("/demandforecasting/train.csv", parse_dates= True, index_col = 0)
# test = pd.read_csv("/demandforecasting/test.csv", parse_dates=True,index_col =1 )

# sample = pd.read_csv("/demandforecasting/sample_submission.csv")


train_data = pd.read_csv("/demandforecasting/train.csv", parse_dates=True, index_col =0)
#plot and try to understand the trend of the graph 
train_data.groupby('date').mean().resample("w").mean().plot()
#selecting the last column to be predicted 
y_train = train_data.iloc[:,-1].values
#dropping the last column which is 'sales'
train_data.drop('sales', 1, inplace=True)
#separating the index column from the 'date' column 
train_data['y'] = train_data.index.year-train_data.index.year.min()
train_data['m'] = train_data.index.month
train_data['d'] = train_data.index.day
train_data['dow'] = train_data.index.dayofweek

from sklearn.model_selection import train_test_split
x_train, x_val, y_train, y_val = train_test_split(train_data, y_train, test_size=.1, random_state=0, shuffle = True)

#  this is just for checking 
cat_var = list(train_data.columns)
cat_var 
train_data
# upto this portion nice!

cat_vars = list(train_data.columns)
cat_vars.remove('y')
# Only year is not categorical, as the value of years are numerically comparable.
cont_vars = ['y']

X_train = []
X_val = []
X_train.append(x_train[cont_vars].astype('float32').values)
X_val.append(x_val[cont_vars].astype('float32').values)

for cat in cat_vars:
    X_train.append(x_train[cat].values)
    X_val.append(x_val[cat].values)

# https://kanoki.org/2019/10/09/working-with-pandas-datetime/

cat_sizes = {}
cat_embsizes = {}
for cat in cat_vars:
    cat_sizes[cat] = train_data[cat].nunique()
    cat_embsizes[cat] = min(50, cat_sizes[cat]//2+1)

cat_embsizes

test_data = pd.read_csv("/demandforecasting/test.csv", parse_dates=True, index_col =1)
test_data['y'] = test_data.index.year-train_data.index.year.min()
test_data['m'] = test_data.index.month
test_data['d'] = test_data.index.day
test_data['dow'] = test_data.index.dayofweek

X_test = []
X_test.append(test_data[cont_vars].astype('float32').values)
for cat in cat_vars:
    X_test.append(test_data[cat].values)

import keras.backend as K

def custom_smape(x, x_):
    return K.mean(2*K.abs(x-x_)/(K.abs(x)+K.abs(x_)))

y = Input((len(cont_vars),), name='cont_vars')
ins = [y]
concat = [y]
for cat in cat_vars:
    x = Input((1,), name=cat)
    ins.append(x)
    x = Embedding(cat_sizes[cat]+1, cat_embsizes[cat], input_length=1)(x)
    x = Reshape((cat_embsizes[cat],))(x)
    concat.append(x)
y = Concatenate()(concat)
y = Dense(100, activation= 'relu')(y)
# y = Dense(100, activation= 'relu')(y)
y = Dense(1)(y)
model = Model(ins, y)
model.summary()
model.compile('adadelta', custom_smape)

# X_train = X_train.astype('float32')
y_train= y_train.astype('float32')

# X_val = X_val.astype('float32')
y_val= y_val.astype('float32')
model.fit(X_train, y_train, 64, 2, validation_data=(X_val, y_val))
# a shitty explanation for the input and output tensor mismatch problem 
#validation_data: ... validation_data could be: - tuple (x_val, y_val) of Numpy arrays or tensors - tuple (x_val, y_val, val_sample_weights) of Numpy arrays - dataset ...
#So, validation_data has to be a tuple rather than a list (of Numpy arrays or tensors). We should use parentheses (round brackets) (...), not square brackets [...].

test_preds = model.predict(X_test)
sample_data = pd.read_csv("/demandforecasting/sample_submission.csv", index_col=0)
sample_data['sales'] = test_preds
sample_data.to_csv('preds.csv')

#resource links

# https://www.kaggle.com/rezas26/simple-keras-starter
#https://www.kaggle.com/danofer/getting-started-with-time-series-features

result = pd.read_csv('preds.csv')
result

