# -*- coding: utf-8 -*-
"""Part1:Bag of Words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N6VAS--i5CTIfm3UD5UhFdsaBycqd0-5
"""

# Commented out IPython magic to ensure Python compatibility.
#importing necessary libraries 

import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import tensorflow as tf

from google.colab import files
uploaded = files.upload()

train = pd.read_csv("labeledTrainData.tsv", delimiter="\t", header=0, quoting=3)
train.shape
train

train.columns.values

train.review[0]

# data cleaning and Text Processing 
from bs4 import BeautifulSoup

# removing html markup 
example = BeautifulSoup(train['review'][0]) 
# print(train['review'][0])
# print("see the differenec motherfucker")
print(example.get_text())

import re
# Use regular expressions to do a find-and-replace
letters_only = re.sub("[^a-zA-Z]",           # The pattern to search for
                      " ",                   # The pattern to replace it with
                      example.get_text() )  # The text to search
print(letters_only)

# [] group membership 
# ^ means not 
# re_sub is replacing a 'space' which does not include any small or capital letter

lower_case = letters_only.lower()        # Convert to lower case
words = lower_case.split()                    # split into words 

print(len(words))

import nltk 
# nltk.download()
import nltk
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger') 
import pandas as pd
import matplotlib.pyplot as plt
import io
import unicodedata
import numpy as np
import re
import string

from nltk.corpus import stopwords # Import the stop word list
# stopwords.words("english")

# let's remove the stop-words from the words 
words = [w for w in words if not w in stopwords.words("english")]
print(words)
print(len(words))

def review_to_words( raw_review ):
    review_text = BeautifulSoup(raw_review).get_text() 
    letters_only = re.sub("[^a-zA-Z]", " ", review_text) 
    words = letters_only.lower().split()                             
    stops = set(stopwords.words("english"))                  
    meaningful_words = [w for w in words if not w in stops]   
    return( " ".join( meaningful_words ))

clean_review = review_to_words(train['review'][0]) 
print(clean_review)

num_reviews = train["review"].size
num_reviews

# loop through 25000 reviews 
clean_train_reviews = []
#loop 
for i in range (0, num_reviews):
  # # If the index is evenly divisible by 1000, print a message
  #   if( (i+1)%1000 == 0 ):
  #       print ("Review %d of %d\n" % ( i+1, num_reviews ))     
  clean_train_reviews.append(review_to_words(train['review'][i]))

len(clean_train_reviews)

# now creating features from the Bag of WORDS 
from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(analyzer = "word",   \
                             tokenizer = None,    \
                             preprocessor = None, \
                             stop_words = None,   \
                             max_features = 5000) 

train_data_features = vectorizer.fit_transform(clean_train_reviews)

train_data_features = train_data_features.toarray()
print(train_data_features.shape)

vocab = vectorizer.get_feature_names()
print(vocab)

# import numpy as np

# # Sum up the counts of each vocabulary word
# dist = np.sum(train_data_features, axis=0)

# # For each, print the vocabulary word and the number of times it 
# # appears in the training set
# for tag, count in zip(vocab, dist):
#      print (count, tag)

from sklearn.ensemble import RandomForestClassifier

# Initialize a Random Forest classifier with 100 trees
forest = RandomForestClassifier(n_estimators = 100) 

# Fit the forest to the training set, using the bag of words as 
# features and the sentiment labels as the response variable
#
# This may take a few minutes to run
forest = forest.fit( train_data_features, train["sentiment"] )

# from google.colab import files
# uploaded = files.upload()

test = pd.read_csv("testData.tsv", header=0, delimiter="\t", \
                   quoting=3 )
print (test.shape)

# Create an empty list and append the clean reviews one by one
num_reviews = len(test["review"])
clean_test_reviews = [] 

for i in range(0,num_reviews):
  clean_review = review_to_words( test["review"][i] )
  clean_test_reviews.append( clean_review )

# Get a bag of words for the test set, and convert to a numpy array
test_data_features = vectorizer.transform(clean_test_reviews)
test_data_features = test_data_features.toarray()

# Use the random forest to make sentiment label predictions
result = forest.predict(test_data_features)


result

output = pd.DataFrame( data={"id":test["id"], "sentiment":result} )

from google.colab import files
output.to_csv("model.csv", index=False, quoting=3)
files.download('model.csv')

out = pd.read_csv("model.csv", quoting=3)
out
sentiment = out.sentiment.values
sentiment

def unique(sentiment):
    x = np.array(sentiment)
    print(np.unique(x))

unique(sentiment)

#splitting dataset into training and testing data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(train_data_features,train["sentiment"],test_size=0.2,random_state=0)
print("Splitting Done")

from sklearn.ensemble import RandomForestClassifier

# Initialize a Random Forest classifier with 100 trees
forest = RandomForestClassifier(n_estimators = 100) 

# Fit the forest to the training set, using the bag of words as 
# features and the sentiment labels as the response variable
#
# This may take a few minutes to run
forest = forest.fit(x_train, y_train )
print ("Done")

result = forest.predict(x_test)
print("Predictions Done")

from sklearn.metrics import accuracy_score,f1_score,confusion_matrix
#checking accuracy score
accuracy= accuracy_score(y_test,result)
accuracy

f1=f1_score(y_test,result)
f1

